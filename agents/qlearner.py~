import torch
import torch.nn as nn
import torch.nn.functional as F
import random
from collections import namedtuple, deque
from itertools import count

class DQN(nn.Module):

        def __init__(self, observations, actions):

                super(DQN, self).__init__()
                self.layer1 = nn.Linear(observations, 100)
                self.layer2 = nn.Linear(100, 100)
                self.layer3 == nn.Linear(100, actions)


        def forward(self, x):
                x = F.relu(self.layer1(x))
                x = F.relu(self.layer2(x))
                return self.layer3(x)

class ReplayMemory(object):

        def __init__(self, capacity):
                self.memory = deque([], maxlen=capacity)

        def push(self, *args):
                self.memory.append(Transition(*args))

        def sample(self, batch_size):
                return random.sample(self.memory, batch_size)

        def __len__(self):
                return len(self.memory)
